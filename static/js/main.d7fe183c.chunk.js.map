{"version":3,"sources":["components/monster-card.js","components/monster-card-list.js","components/search-box.js","App.js","reportWebVitals.js","index.js"],"names":["MonsterCard","props","className","alt","monster","name","src","id","email","MonsterCardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","e","setState","target","value","a","fetch","then","response","json","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uVAGaA,EAAc,SAACC,GAC3B,OACC,sBAAKC,UAAU,yBAAf,UACC,qBACCA,UAAU,qBACVC,IAAKF,EAAMG,QAAQC,KACnBC,IAAG,+BAA0BL,EAAMG,QAAQG,GAAxC,eAEJ,mCAAMN,EAAMG,QAAQC,QACpB,4BAAIJ,EAAMG,QAAQI,YCRRC,G,MAAkB,SAACR,GAG/B,OACC,qBAAKC,UAAU,oBAAf,SACED,EAAMS,SAASC,KAAI,SAACP,GAAD,OACnB,cAAC,EAAD,CAA8BA,QAASA,GAArBA,EAAQG,WCPjBK,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACxC,OACC,uBACCZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCiCEG,G,kNArCdC,MAAQ,CACPR,SAAU,GACVS,YAAa,I,EAadL,aAAe,SAACM,GAEf,EAAKC,SAAS,CAAEF,YAAaC,EAAEE,OAAOC,QAAS,gB,8FAZhD,iCAAAC,EAAA,sEAEOC,MAAM,8CAA8CC,MACzD,SAACC,GAAD,OACCA,EACEC,OACAF,MAAK,SAAChB,GAAD,OAAc,EAAKW,SAAS,CAAEX,SAAUA,UANlD,2C,0EAcA,WAAU,IAAD,EAC0BmB,KAAKX,MAA/BR,EADA,EACAA,SAAUS,EADV,EACUA,YACZW,EAAmBpB,EAASqB,QAAO,SAAC3B,GAAD,OACxCA,EAAQC,KAAK2B,cAAcC,SAASd,EAAYa,kBAEjD,OACC,sBAAK9B,UAAU,MAAf,UACC,kDACA,cAAC,EAAD,CACCW,YAAY,kBACZC,aAAce,KAAKf,eAEpB,cAAC,EAAD,CAAiBJ,SAAUoB,W,GAhCbI,cCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d7fe183c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../styles/monster-card.css\";\n\nexport const MonsterCard = (props) => {\n\treturn (\n\t\t<div className=\"monster-card-container\">\n\t\t\t<img\n\t\t\t\tclassName=\"monster-card-image\"\n\t\t\t\talt={props.monster.name}\n\t\t\t\tsrc={`https://robohash.org/${props.monster.id}?set=set2`}\n\t\t\t/>\n\t\t\t<h2> {props.monster.name}</h2>\n\t\t\t<p>{props.monster.email}</p>\n\t\t</div>\n\t);\n};\n","import React from \"react\";\nimport { MonsterCard } from \"./monster-card\";\nimport \"../styles/monster-card-list.css\";\n\nexport const MonsterCardList = (props) => {\n\t// console.log(props);\n\t// console.log(props.children);\n\treturn (\n\t\t<div className=\"monster-card-list\">\n\t\t\t{props.monsters.map((monster) => (\n\t\t\t\t<MonsterCard key={monster.id} monster={monster} />\n\t\t\t))}\n\t\t</div>\n\t);\n};\n","import React from \"react\";\nimport \"../styles/search-box.css\";\n\nexport const SearchBox = ({ placeholder, handleChange }) => {\n\treturn (\n\t\t<input\n\t\t\tclassName=\"search\"\n\t\t\ttype=\"search\"\n\t\t\tplaceholder={placeholder}\n\t\t\tonChange={handleChange}\n\t\t/>\n\t);\n};\n","import { Component } from \"react\";\nimport { MonsterCardList } from \"./components/monster-card-list\";\nimport { SearchBox } from \"./components/search-box\";\nimport \"./App.css\";\nclass App extends Component {\n\tstate = {\n\t\tmonsters: [],\n\t\tsearchField: \"\",\n\t};\n\n\tasync componentDidMount() {\n\t\t// API calls here\n\t\tawait fetch(\"https://jsonplaceholder.typicode.com/users\").then(\n\t\t\t(response) =>\n\t\t\t\tresponse\n\t\t\t\t\t.json()\n\t\t\t\t\t.then((monsters) => this.setState({ monsters: monsters }))\n\t\t);\n\t}\n\n\thandleChange = (e) => {\n\t\t// 2nd param , gets called after setState\n\t\tthis.setState({ searchField: e.target.value }, () => {});\n\t};\n\trender() {\n\t\tconst { monsters, searchField } = this.state;\n\t\tconst filteredMonsters = monsters.filter((monster) =>\n\t\t\tmonster.name.toLowerCase().includes(searchField.toLowerCase())\n\t\t);\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>Monsters Rolodex</h1>\n\t\t\t\t<SearchBox\n\t\t\t\t\tplaceholder=\"search monsters\"\n\t\t\t\t\thandleChange={this.handleChange}\n\t\t\t\t/>\n\t\t\t\t<MonsterCardList monsters={filteredMonsters}></MonsterCardList>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}